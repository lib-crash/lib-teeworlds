#!/bin/bash
# tw_split_logs - by ChillerDragon
# splits teeworlds logfiles into smaller chunks
# and adds proper timestamps to all of the files

MAX_LINES=100000
LOGFILE=invalid.txt

mkdir -p /tmp/tw_split_"$USER" || exit 1

function bold() {
    tput bold
    echo "$*"
    tput sgr0
}

function show_help() {
    echo "usage: $(basename "$0") [OPTIONS]"
    echo "options:"
    echo "  filename        file to split"
    echo "  <MAX_LINES>     split chunk size"
    echo "  --auto          split all big files in current dir"
    echo "examples:"
    bold "  $(basename "$0") 2020-05-21_21-18-00.log"
    echo "    split logfile into $MAX_LINES lines chunks"
    echo ""
    bold "  $(basename "$0") foo.log 20"
    echo "    split logfile into 20 lines chunks"
    echo ""
    bold "  $(basename "$0") --auto"
    echo "    split all logfiles in current dir that are too big"
}

if [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ "$#" == "0" ]
then
    show_help
    exit 0
fi

IS_AUTO=0

for arg in "$@"
do
    # OPTIONS
    if [ "${arg:0:2}" == "--" ]
    then
        if [ "$arg" == "--auto" ]
        then
            echo "[!] WARNING DO NOT USE --auto WHEN THE SERVER IS RUNNING"
            echo "[!] IT COULD FORMAT A LOGFILE THAT IS CURRENTLY USED FOR WRITING"
            echo "do you really want to continue? [y/N]"
            read -r -n 1 yn
            echo ""
            if [[ ! "$yn" =~ [yY] ]]
            then
                exit
            fi
            IS_AUTO=1
        else
            echo "unkown option '$arg' try --help"
            exit 1
        fi
    fi

    # FILE OR LINENUM
    if [[ "$arg" =~ ^[0-9]*$ ]]
    then
        MAX_LINES="$arg"
    else
        LOGFILE="$arg"
    fi
done

function split_log() {
	# usage: split_log <filename>
	local ts_and_ext
	local backup
	local basename
	local lines
	local file_ext
	local file_ts
	local logfile
	logfile="$1"

	if [[ "$logfile" =~ / ]]
	then
		echo "Error: logfile '$logfile' can not contain slashes"
		exit 1
	fi
	if [ ! -f "$logfile" ]
	then
		echo "Error: logfile not found '$logfile'"
		exit 1
	fi

	ts_and_ext="$(
		echo "$logfile" | \
		grep -oE '[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{2}-[0-9]{2}-[0-9]{2}(.txt|.log)+$'
	)"
	if [ "$ts_and_ext" == "" ]
	then
		ts_and_ext="$(
			echo "$logfile" | \
			grep -oE '[0-9]{4}-[0-9]{2}-[0-9]{2}(.txt|.log)+$'
		)"
		if [ "$ts_and_ext" == "" ]
		then
			echo "Error: could not parse timestamp of file '$logfile'"
			echo "       the logfile has to have a timestamp at the end of the filename"
			echo ""
			echo "       sample_srv_2023-08-28_21-06-27.txt"
			echo "       sample_srv_2023-08-28.txt"
			echo ""
			exit 1
		fi
	fi
	file_ext="${ts_and_ext##*.}"
	file_ts="${ts_and_ext%%.*}"
	if [ ! -f "$logfile" ]
	then
		echo "invalid logfile $logfile"
		exit 1
	fi
	lines="$(wc -l "$logfile" | cut -d' ' -f1)"
	if [ "$lines" -lt "$((MAX_LINES * 2))" ]
	then
		echo "skipping file because it has less than $((MAX_LINES * 2)) lines:"
		wc -l "$logfile"
		return
	fi

	mkdir -p "$file_ts" || exit 1

	mv "$logfile" "$file_ts" || exit 1
	cd "$file_ts" || exit 1

	backup="/tmp/tw_split_$USER/$logfile.bak"
	cp "$logfile" "$backup" || exit 1
	basename="${logfile%$ts_and_ext*}"

	split -d -l "$MAX_LINES" "$logfile" || exit 1
	rm "$logfile"

	for log in ./x*
	do
		echo "logfile: $log"
		first_line="$(head -n1 "$log")"
		if [[ "$first_line" =~ ^\[(.*)\]\[ ]]
		then
			ts_raw="${BASH_REMATCH[1]}"
			ts="$(echo "$ts_raw" | sed 's/:/-/g' | sed 's/ /_/g')"
			mv "$log" "${basename}${ts}.${file_ext}"
		else
			echo "Could not parse teeworlds time stamp"
			exit 1
		fi
	done

	echo "finished!"
	echo "replaced file '$logfile'"
	echo "with the folder '$file_ts'"
	echo "original file was moved to '$backup'"
}

if [ "$IS_AUTO" == "1" ]
then
    for f in ./*.log ./*.txt
    do
        [[ -e "$f" ]] || { echo "no logfiles found."; exit 1; }

        split_log "$f"
    done
else
    split_log "$LOGFILE"
fi

