#!/bin/bash
#
# tool to generate CMakeLists.txt for teeworlds and ddnet
# it looks at the src directory and inserts the sorted list
# in CMakeLists.txt
#
# USAGE
# navigate to the root of the teeworlds or ddnet repository
# and then execute:
# tw_cmake .

if [ "$#" -ne "1" ]
then
    echo "Usage: $(basename "$0") <teeworlds source root>"
    exit 1
fi
twpath="$1"
cmakelist="$twpath/"CMakeLists.txt
datasrc_path="$twpath/datasrc"

if [ ! -f "$cmakelist" ]
then
    echo "[-] Error: '$cmakelist' file not found."
    exit 1
fi
if [ ! -f "$datasrc_path"/game.png ] && [ -f "$twpath"/data/game.png ]
then
    datasrc_path="$twpath/data"
    echo "[*] use data/ dir instead of datasrc/"
fi
if [ ! -d "$datasrc_path" ]
then
    echo "[-] Error: '$datasrc_path' path not found."
    exit 1
fi

function generate_data() {
    local f
    local files
    files=$(find "$datasrc_path" -type f \( \
        -name "*.json" -o \
        -name "*.rules" -o \
        -name "*.png" -o \
        -name "*.wv" -o \
        -name "*.txt" -o \
        -name "*.ttf" -o \
        -name "*.ttc" -o \
        -name "*.otf" -o \
        -name "*.frag" -o \
        -name "*.vert" -o \
        -name "*.pem" -o \
        -name "*.map" \) -print0 | while IFS= read -r -d '' f
    do
        f="${f// /\\ }"
        echo "  ${f/$datasrc_path\//}"
    done | LC_ALL=C sort)

    pad="########################################################################"
    empty=$(sed '/set(EXPECTED_DATA/,/)/d' "$cmakelist" | \
        tr '\n' '\f' | \
        sed -e "s/# DATA\\f$pad/# DATA\\f$pad\\fXXX START\\fXXX END/" | \
        tr '\f' '\n')
    {
        echo "$empty" | sed -n -e '/XXX START/,$!p'
        echo ""
        echo "set(EXPECTED_DATA"
        echo "$files"
        printf ")"
        echo "$empty" | sed -n -e '1,/XXX END/!p'
    } > "$cmakelist"
}
function get_files() {
    local dir="$1"
    local oneline="$2"
    local indent="${3:-  }"
    local pipe=cat
    dir="$twpath/$dir"
    if [ "$oneline" == "1" ]
    then
        pipe="tr '\n' ' '"
    fi
    find "$dir" -type f \( \
        -name "*.cpp" -o \
        -name "*.c" -o \
        -name "*.h" \) -print0 | while IFS= read -r -d '' f
    do
        f="${f// /\\ }"
        if [ "$oneline" == "1" ]
        then
            printf "\n%s" "${f/$dir\//}"
        else
            printf "%s%s\n" "$indent" "${f/$dir\//}"
        fi
    done | LC_ALL=C sort | eval "$pipe"
}
function generate_src_oneline() {
    local set_str="$1"
    local dir="$2"
    local files
    local set_str_start
    files="$(get_files "$dir" 1)"
    files="${files::-1}"
    set_str_start="$(echo "$set_src" | cut -d' ' -f1-3)"
    while IFS= read -r line
    do
        if [ "$line" == "$set_src" ]
        then
            printf "%s%s)\n" "$set_str_start" "$files"
        else
            echo "$line"
        fi
    done < "$cmakelist" > "$cmakelist.tmp"
    mv "$cmakelist.tmp" "$cmakelist"
}
function generate_src() {
    local set_str="$1"
    local dir="$2"
    local line
    local is_match=0
    local indent
    echo "[*] generate source $set_src ..."
    while IFS= read -r line
    do
        if [ "$is_match" == "0" ]
        then
            if [ "$line" == "$set_str" ]
            then
                is_match=1
            fi
            echo "$line"
            indent=''
        else
            if [ "$indent" == "" ]
            then
                indent="$(echo "$line" | grep -o '^[[:space:]]*')"
            fi
            if [[ "$line" =~ ^[[:space:]]*\) ]]
            then
                is_match=0
                get_files "$dir" "0" "$indent"
                echo "$line"
            fi
        fi
    done < "$cmakelist" > "$cmakelist.tmp"
    mv "$cmakelist.tmp" "$cmakelist"
}
function generate_sources() {
    local set_src
    while IFS= read -r set_src
    do
        if [[ "$set_src" == *GAME_SHARED* ]] || \
		[[ "$set_src" == *ENGINE_INTERFACE* ]] || \
		[[ "$set_src" == *MASTERSRV_SRC* ]] || \
		[[ "$set_src" == *TWPING_SRC* ]]
        then
            continue
        fi
        if [[ "$set_src" =~ \) ]]
        then
            generate_src_oneline "$set_src" "$(echo "$set_src" | awk '{ print $3 }')"
        else
            generate_src "$set_src" "$(echo "$set_src" | awk '{ print $3 }')"
        fi
    done < <(grep '^[[:space:]]*set_src(' "$cmakelist")
}
generate_sources
generate_data

echo "[*] done"

